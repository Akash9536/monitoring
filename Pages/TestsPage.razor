@implements IDisposable
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@page "/tests"



<div class="container-fluid my-3">

    <flx_web.Components.Menu 
        Title="Tests - Results of Synthetic Tests" 
        Description="Provides the results of real time synthetic tests for common API endpoints" 
        ErrorMessage=@Error 
        Loading=@(Data == null)
        />

    @if (Data != null)
    {
        <div class="row mb-2">
            <div class="col-3 pt-2">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="separateRequestType" @bind="SeparateRequestType">
                    <label class="form-check-label" for="separateRequestType">Separate Request Types</label>
                </div>
            </div>
            <div class="col-3 pt-2">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="compactView" @bind="CompactView">
                    <label class="form-check-label" for="compactView">Compact View</label>
                </div>
            </div>
            <div class="col-6">
               <flx_web.Components.HistorySelector Settings=Settings />
            </div>
        </div>

        <flx_web.Components.TimeBlocksBox TimeBlocks=TimeBlocks LastLoaded=LastLoad CompactView=@CompactView />

        foreach (var customer in Data.Customers.OrderBy(c => c.Name))
        {
            <flx_web.Components.CustomerBox 
                Customer=customer 
                NumberOfTimeBlocks=@TimeBlocks.Count
                CompactView=@CompactView
            />
        }
    }

</div>

@code {
    private SynthData? Data;
    private SynthData? BufferedData;

    private List<TimeBlock>? TimeBlocks;
    private List<TimeBlock>? BufferedTimeBlocks;

    private string SelectedFile;

    private Settings? Settings;
    private DateTime LastLoad;

    private String? Error;

    private System.Timers.Timer Timer;

    private bool SeparateRequestType
    {
        get { return _SeparateRequestType; }
        set { _SeparateRequestType = value; }
    }
    private bool _SeparateRequestType;

    private bool CompactView
    {
        get { return _CompactView; }
        set { _CompactView = value; }
    }
    private bool _CompactView;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();

        Timer = new System.Timers.Timer(1);        
        Timer.Elapsed += async (s, e) =>
        {
            Timer.Interval = 10000;

            await OnTimer();
        };
        Timer.Start();
    }

    protected async Task OnTimer()
    {
        try
        {
            await LoadSelectedHistory();

            LastLoad = DateTime.Now;

            if (!String.IsNullOrWhiteSpace(SelectedFile))
            {
                var timestring =
                    $"{SelectedFile.Substring(0, 4)}-" +
                    $"{SelectedFile.Substring(4, 2)}-" +
                    $"{SelectedFile.Substring(6, 2)} " +
                    $"{SelectedFile.Substring(8, 2)}:" +
                    $"{SelectedFile.Substring(10, 2)}";

                LastLoad = DateTime.Parse(timestring).ToLocalTime();
            }


            BufferedTimeBlocks = SynthData.GenerateTimeBlocks(
                LastLoad,
                Settings.SynthTimeBlockInterval,
                10).OrderByDescending(t => t.From).ToList();

            await LoadData();

            TimeBlocks = BufferedTimeBlocks;
            Data = BufferedData;

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Error = $"Connection error. {ex.Message}";
        }
    }

    protected async Task LoadData()
    {
        var startTime = DateTime.Now;
        try
        {
            var fileToUse = String.IsNullOrWhiteSpace(SelectedFile)
                ? Settings.SynthDataFile
                : $"history/{SelectedFile}";

            var json = await Http.GetStringAsync($"data/{fileToUse}?hash={Guid.NewGuid()}");

            BufferedData = Newtonsoft.Json.JsonConvert.DeserializeObject<SynthData>(json,
                new Newtonsoft.Json.JsonSerializerSettings()
                {
                    DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Local
                });

            if (!SeparateRequestType)
            {
                BufferedData.TransformByCustomer(LastLoad, BufferedTimeBlocks, Global.GetSynthCustomers(Settings));
            }
            else
            {
                BufferedData.TransformByCustomerRequests(LastLoad, BufferedTimeBlocks, Global.GetSynthCustomers(Settings));     
            }

            Error = null;
        }
        catch (Exception ex)
        {
            Error = $"Connection error. {ex.Message}";
        }

        var endTime = DateTime.Now;
    }

    protected async Task LoadSettings()
    {
        try
        {
            var json = await Http.GetStringAsync($"data/settings.json?hash={Guid.NewGuid()}");
            Settings = Newtonsoft.Json.JsonConvert.DeserializeObject<Settings>(json);
        }
        catch (Exception ex)
        {
            Error = $"Connection error. {ex.Message}";
        }
    }

    protected async Task LoadSelectedHistory()
    {
        if (await sessionStorage.ContainKeyAsync("SelectedFile"))
        {
            SelectedFile = await sessionStorage.GetItemAsStringAsync("SelectedFile");
        }
    }

    public void Dispose()
    {
        Timer.Stop();
    }
}


