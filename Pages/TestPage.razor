@page "/tests/{CustomerId}"
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<div class="container-fluid my-3">

    <flx_web.Components.Menu 
        Title="Customer Tests - Detailed Synthetic Test Results" 
        Description="Provides the results of real time synthetic tests for a customer" 
        ErrorMessage=@Error 
        Loading=@(DataForBlocks == null || DataForTable == null)
        />

    @if (DataForBlocks != null && DataForTable != null)
    {
        <div 
            class="container-fluid"
            >

            <flx_web.Components.TimeBlocksBox 
                TimeBlocks=TimeBlocks 
                LastLoaded=LastLoad 
                />

            <flx_web.Components.CustomerBox 
                Customer=CustomerForBlocks 
                NumberOfTimeBlocks=@TimeBlocks.Count 
                />

            <flx_web.Components.ResultsTable 
                Customer=CustomerForTable
                />
        </div>
    }

</div>

@code {
    [Parameter]
    public string? CustomerId { get; set; }

    private SynthData? DataForBlocks;
    private SynthData? DataForTable;

    private Settings? Settings;

    private string SelectedFile;

    private DateTime LastLoad;
    private List<TimeBlock>? TimeBlocks;

    private SynthCustomer CustomerForTable;
    private SynthCustomer CustomerForBlocks;

    private String Error;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();

        var timer = new System.Timers.Timer(1);
        timer.Elapsed += async (s, e) =>
        {
            try
            {
                timer.Interval = 10000;

                await LoadSelectedHistory();

                LastLoad = DateTime.Now;

                if (!String.IsNullOrWhiteSpace(SelectedFile))
                {
                    var timestring =
                        $"{SelectedFile.Substring(0, 4)}-" +
                        $"{SelectedFile.Substring(4, 2)}-" +
                        $"{SelectedFile.Substring(6, 2)} " +
                        $"{SelectedFile.Substring(8, 2)}:" +
                        $"{SelectedFile.Substring(10, 2)}";

                    LastLoad = DateTime.Parse(timestring).ToLocalTime();
                }

                TimeBlocks = SynthData.GenerateTimeBlocks(LastLoad, Settings.SynthTimeBlockInterval, 10);

                await LoadDataForBlocks();
                await LoadDataForTable();

                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                Error = $"Connection error. {ex.Message}";
            }
        };
        timer.Start();
    }

    protected async Task LoadDataForBlocks()
    {
        try
        {
            var fileToUse = String.IsNullOrWhiteSpace(SelectedFile)
                ? Settings.SynthDataFile
                : $"history/{SelectedFile}";

            var json = await Http.GetStringAsync($"data/{fileToUse}?hash={Guid.NewGuid()}");
            DataForBlocks = Newtonsoft.Json.JsonConvert.DeserializeObject<SynthData>(json,
                new Newtonsoft.Json.JsonSerializerSettings()
                {
                    DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Local
                });

            DataForBlocks?.TransformByCustomer(LastLoad, TimeBlocks, Global.GetSynthCustomers(Settings));

            CustomerForBlocks = DataForBlocks?.Customers?.
                FirstOrDefault(c => c != null && c.Id.ToLower() == CustomerId.ToLower());
            Error = null;
        }
        catch (Exception ex)
        {
            Error = "Connection error.";
        }
    }

    protected async Task LoadDataForTable()
    {
        try
        {            
            var fileToUse = String.IsNullOrWhiteSpace(SelectedFile)
                ? Settings.SynthDataFile
                : $"history/{SelectedFile}";

            var json = await Http.GetStringAsync($"data/{fileToUse}?hash={Guid.NewGuid()}");
            DataForTable = Newtonsoft.Json.JsonConvert.DeserializeObject<SynthData>(json,
                new Newtonsoft.Json.JsonSerializerSettings()
                {
                    DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Local
                });

            CustomerForTable = DataForTable.Customers.
                FirstOrDefault(c => c != null && c.Id .ToLower() == CustomerId.ToLower());
            Error = null;
        }
        catch (Exception ex)
        {
            Error = "Connection error.";
        }
    }

    protected async Task LoadSettings()
    {
        try
        {
            var json = await Http.GetStringAsync($"data/settings.json?hash={Guid.NewGuid()}");
            Settings = Newtonsoft.Json.JsonConvert.DeserializeObject<Settings>(json);
        }
        catch (Exception ex)
        {
            Error = $"Connection error. {ex.Message}";
        }
    }

    protected async Task LoadSelectedHistory()
    {
        if (await sessionStorage.ContainKeyAsync("SelectedFile"))
        {
            SelectedFile = await sessionStorage.GetItemAsStringAsync("SelectedFile");
        }
    }
}


